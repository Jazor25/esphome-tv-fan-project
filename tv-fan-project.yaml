esphome:
  name: tv-fan-project
  friendly_name: TV Fan Project

esp32:
  board: esp32dev
  framework:
    type: esp-idf

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "lnlg+aTC1uDy/QYeGJBBzu5zuivdzFpj2NgK/iLb0Ws="

ota:
  - platform: esphome
    password: "fc0a7f47f7bee71c7148c6dffc7c4c3e"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Tv-Fan-Project Fallback Hotspot"
    password: "yrvyJ6sgd7Pp"

captive_portal:

web_server:

sensor:
  - platform: dht
    pin: GPIO21
    model: DHT22
    temperature:
      name: "Temperature_1"
      id: room_temp_1
    humidity:
      name: "Humidity_1"
    update_interval: 20s

  - platform: dht
    pin: GPIO22
    model: DHT22
    temperature:
      name: "Temperature_2"
      id: room_temp_2
    humidity:
      name: "Humidity_2"
    update_interval: 20s

switch:
  - platform: gpio
    pin: GPIO32               # The GPIO pin to control the fan relay
    id: fan_switch_1
    inverted: false

  - platform: gpio
    pin: GPIO25               # The GPIO pin to control the fan relay
    id: fan_switch_2
    inverted: false

number:
  - platform: template
    name: "Fan ON Temperature"
    id: fan_on_temp_1
    min_value: 10
    max_value: 40
    step: 0.5
    initial_value: 25.0  # soll: 32
    set_action:
      then:
        - logger.log:
            format: "Fan 1 ON Temp set to %.1f"
            args: [x]       # x ist der gesetzte Wert in set_action

  - platform: template
    name: "Fan OFF Temperature 1"
    id: fan_off_temp_1
    min_value: 5
    max_value: 38
    step: 0.5
    initial_value: 24.0  # soll: 28
    set_action:
      then:
        - logger.log:
            format: "Fan 1 OFF Temp set to %.1f"
            args: [x]

  - platform: template
    name: "Fan ON Temperature 2"
    id: fan_on_temp_2
    min_value: 10
    max_value: 40
    step: 0.5
    initial_value: 25.0 # soll: 32
    set_action:
      then:
        - logger.log:
            format: "Fan 2 ON Temp set to %.1f"
            args: [x]       # x ist der gesetzte Wert in set_action

  - platform: template
    name: "Fan OFF Temperature"
    id: fan_off_temp_2
    min_value: 5
    max_value: 38
    step: 0.5
    initial_value: 24.0 # soll: 28
    set_action:
      then:
        - logger.log:
            format: "Fan 2 OFF Temp set to %.1f"
            args: [x]

interval:
  - interval: 10s
    then:
      - if:
          condition:
            lambda: |-
              return id(room_temp_1).state > id(fan_on_temp_1).state;
          then:
            - logger.log:
                format: "L端fter 1 wird eingeschaltet: Raumtemperatur (%.1f) > Einschalt-Temperatur (%.1f)"
                args: [id(room_temp_1).state, id(fan_on_temp_1).state]
                level: INFO
            - switch.turn_on: fan_switch_1
      - if:
          condition:
            lambda: |-
              return id(room_temp_1).state < id(fan_off_temp_1).state;
          then:
            - logger.log:
                format: "L端fter 1 wird ausgeschaltet: Raumtemperatur (%.1f) < Ausschalttemperatur (%.1f)"
                args: [id(room_temp_1).state, id(fan_off_temp_1).state]
                level: INFO
            - switch.turn_off: fan_switch_1
      
      - if:
          condition:
            lambda: |-
              return id(room_temp_2).state > id(fan_on_temp_2).state;
          then:
            - logger.log:
                format: "L端fter 2 wird eingeschaltet: Raumtemperatur (%.1f) > Einschalt-Temperatur (%.1f)"
                args: [id(room_temp_2).state, id(fan_on_temp_2).state]
                level: INFO
            - switch.turn_on: fan_switch_2
      - if:
          condition:
            lambda: |-
              return id(room_temp_2).state < id(fan_off_temp_2).state;
          then:
            - logger.log:
                format: "L端fter 2 wird ausgeschaltet: Raumtemperatur (%.1f) < Ausschalttemperatur (%.1f)"
                args: [id(room_temp_2).state, id(fan_off_temp_2).state]
                level: INFO
            - switch.turn_off: fan_switch_2

esphome:
  name: tv-fan-project
  friendly_name: TV Fan Project
  comment: "Dual fan temperature control system with independent DHT22 sensors"
  project:
    name: "custom.tv_fan_control"
    version: "1.0"
  on_boot:
    priority: -100
    then:
      - text_sensor.template.publish:
          id: device_status
          state: "on"

esp32:
  board: esp32dev
  framework:
    type: esp-idf


# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_encryption_key

ota:
  - platform: esphome
    password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Tv-Fan-Project Fallback Hotspot"
    password: "yrvyJ6sgd7Pp"

captive_portal:

#web_server:

sensor:
  - platform: dht
    pin: GPIO22
    model: DHT22
    temperature:
      name: "Temperature_1"
      id: room_temp_1
    humidity:
      name: "Humidity_1"
    update_interval: 20s

  - platform: dht
    pin: GPIO21
    model: DHT22
    temperature:
      name: "Temperature_2"
      id: room_temp_2
    humidity:
      name: "Humidity_2"
    update_interval: 20s

  # System monitoring sensors
  - platform: uptime
    name: "Uptime"
    update_interval: 60s

  - platform: wifi_signal
    name: "WiFi Signal"
    update_interval: 60s

# Text sensors for system status
text_sensor:
  - platform: template
    id: device_status
    name: "Device Status"
    update_interval: never

  - platform: wifi_info
    ip_address:
      name: "IP Address"


switch:
  - platform: gpio
    pin: GPIO32               # The GPIO pin to control the fan relay
    id: fan_switch_1
    name: "Fan 1 Switch"
    inverted: false
    on_turn_on:
      - logger.log:
          format: "Fan 1 relay activated (GPIO32 HIGH)"
          level: INFO
    on_turn_off:
      - logger.log:
          format: "Fan 1 relay deactivated (GPIO32 LOW)"
          level: INFO

  - platform: gpio
    pin: GPIO25               # The GPIO pin to control the fan relay
    id: fan_switch_2
    name: "Fan 2 Switch"
    inverted: false
    on_turn_on:
      - logger.log:
          format: "Fan 2 relay activated (GPIO25 HIGH)"
          level: INFO
    on_turn_off:
      - logger.log:
          format: "Fan 2 relay deactivated (GPIO25 LOW)"
          level: INFO

number:
  - platform: template
    name: "Fan 1 ON Temperature"
    id: fan_on_temp_1
    min_value: 10
    max_value: 40
    step: 0.5
    initial_value: 31.0  # old default: 32
    set_action:
      then:
        - logger.log:
            format: "Fan 1 ON Temp set to %.1f"
            args: [x]       # x is the value in set_action

  - platform: template
    name: "Fan 1 OFF Temperature"
    id: fan_off_temp_1
    min_value: 5
    max_value: 38
    step: 0.5
    initial_value: 29.0  # old default: 28
    set_action:
      then:
        - logger.log:
            format: "Fan 1 OFF Temp set to %.1f"
            args: [x]

  - platform: template
    name: "Fan 2 ON Temperature"
    id: fan_on_temp_2
    min_value: 10
    max_value: 40
    step: 0.5
    initial_value: 31.0 # old default: 32
    set_action:
      then:
        - logger.log:
            format: "Fan 2 ON Temp set to %.1f"
            args: [x]       # x is the value in set_action

  - platform: template
    name: "Fan 2 OFF Temperature"
    id: fan_off_temp_2
    min_value: 5
    max_value: 38
    step: 0.5
    initial_value: 28.0 # old default: 28
    set_action:
      then:
        - logger.log:
            format: "Fan 2 OFF Temp set to %.1f"
            args: [x]

interval:
  - interval: 20s
    then:
      # Fan 1 Control Logic with State Check
      - if:
          condition:
            lambda: |-
              return id(room_temp_1).state > id(fan_on_temp_1).state && !id(fan_switch_1).state;
          then:
            - logger.log:
                format: "Fan 1 turning ON: Temperature (%.1f°C) > Threshold (%.1f°C)"
                args: [id(room_temp_1).state, id(fan_on_temp_1).state]
                level: INFO
            - switch.turn_on: fan_switch_1
      - if:
          condition:
            lambda: |-
              return id(room_temp_1).state > id(fan_on_temp_1).state && id(fan_switch_1).state;
          then:
            - logger.log:
                format: "Fan 1 already ON: Temperature (%.1f°C) > Threshold (%.1f°C)"
                args: [id(room_temp_1).state, id(fan_on_temp_1).state]
                level: DEBUG
      - if:
          condition:
            lambda: |-
              return id(room_temp_1).state < id(fan_off_temp_1).state && id(fan_switch_1).state;
          then:
            - logger.log:
                format: "Fan 1 turning OFF: Temperature (%.1f°C) < Threshold (%.1f°C)"
                args: [id(room_temp_1).state, id(fan_off_temp_1).state]
                level: INFO
            - switch.turn_off: fan_switch_1
      - if:
          condition:
            lambda: |-
              return id(room_temp_1).state < id(fan_off_temp_1).state && !id(fan_switch_1).state;
          then:
            - logger.log:
                format: "Fan 1 already OFF: Temperature (%.1f°C) < Threshold (%.1f°C)"
                args: [id(room_temp_1).state, id(fan_off_temp_1).state]
                level: DEBUG
      
      # Fan 2 Control Logic with State Check
      - if:
          condition:
            lambda: |-
              return id(room_temp_2).state > id(fan_on_temp_2).state && !id(fan_switch_2).state;
          then:
            - logger.log:
                format: "Fan 2 turning ON: Temperature (%.1f°C) > Threshold (%.1f°C)"
                args: [id(room_temp_2).state, id(fan_on_temp_2).state]
                level: INFO
            - switch.turn_on: fan_switch_2
      - if:
          condition:
            lambda: |-
              return id(room_temp_2).state > id(fan_on_temp_2).state && id(fan_switch_2).state;
          then:
            - logger.log:
                format: "Fan 2 already ON: Temperature (%.1f°C) > Threshold (%.1f°C)"
                args: [id(room_temp_2).state, id(fan_on_temp_2).state]
                level: DEBUG
      - if:
          condition:
            lambda: |-
              return id(room_temp_2).state < id(fan_off_temp_2).state && id(fan_switch_2).state;
          then:
            - logger.log:
                format: "Fan 2 turning OFF: Temperature (%.1f°C) < Threshold (%.1f°C)"
                args: [id(room_temp_2).state, id(fan_off_temp_2).state]
                level: INFO
            - switch.turn_off: fan_switch_2
      - if:
          condition:
            lambda: |-
              return id(room_temp_2).state < id(fan_off_temp_2).state && !id(fan_switch_2).state;
          then:
            - logger.log:
                format: "Fan 2 already OFF: Temperature (%.1f°C) < Threshold (%.1f°C)"
                args: [id(room_temp_2).state, id(fan_off_temp_2).state]
                level: DEBUG
